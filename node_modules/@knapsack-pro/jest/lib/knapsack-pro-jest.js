#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@knapsack-pro/core");
const env_config_1 = require("./env-config");
const test_files_finder_1 = require("./test-files-finder");
const jest_cli_1 = require("./jest-cli");
const jest = require('jest');
const { v4: uuidv4 } = require('uuid');
const { name: clientName, version: clientVersion } = require('../package.json');
const jestCLIOptions = jest_cli_1.JestCLI.argvToOptions();
const knapsackProLogger = new core_1.KnapsackProLogger();
knapsackProLogger.debug(`Jest CLI options:\n${core_1.KnapsackProLogger.objectInspect(jestCLIOptions)}`);
env_config_1.EnvConfig.loadEnvironmentVariables();
const projectPath = process.cwd();
const testFilesToExecute = () => test_files_finder_1.TestFilesFinder.allTestFiles();
const knapsackPro = new core_1.KnapsackProCore(clientName, clientVersion, testFilesToExecute);
const onSuccess = async (queueTestFiles) => {
    const testFilePaths = queueTestFiles.map((testFile) => testFile.path);
    const jestCLICoverage = env_config_1.EnvConfig.coverageDirectory
        ? { coverageDirectory: `${env_config_1.EnvConfig.coverageDirectory}/${uuidv4()}` }
        : {};
    const { results: { success: isTestSuiteGreen, testResults }, } = await jest.runCLI({
        ...jestCLIOptions,
        ...jestCLICoverage,
        runTestsByPath: true,
        _: testFilePaths,
    }, [projectPath]);
    const recordedTestFiles = testResults.map(({ testFilePath, perfStats: { start, end }, }) => {
        const path = process.platform === 'win32'
            ? testFilePath.replace(`${projectPath}\\`, '').replace(/\\/g, '/')
            : testFilePath.replace(`${projectPath}/`, '');
        const timeExecutionMiliseconds = end - start;
        const timeExecution = timeExecutionMiliseconds > 0 ? timeExecutionMiliseconds / 1000 : 0.0;
        return {
            path,
            time_execution: timeExecution,
        };
    });
    return {
        recordedTestFiles,
        isTestSuiteGreen,
    };
};
const onError = (error) => { };
knapsackPro.runQueueMode(onSuccess, onError);
