"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestFilesFinder = void 0;
const glob_1 = require("glob");
const minimatch_1 = require("minimatch");
const core_1 = require("@knapsack-pro/core");
const env_config_1 = require("./env-config");
const Urls = __importStar(require("./urls"));
class TestFilesFinder {
    static allTestFiles() {
        const testFiles = glob_1.glob
            .sync(env_config_1.EnvConfig.testFilePattern)
            .filter((testFilePath) => {
            if (env_config_1.EnvConfig.testFileExcludePattern) {
                return !(0, minimatch_1.minimatch)(testFilePath, env_config_1.EnvConfig.testFileExcludePattern, {
                    matchBase: true,
                });
            }
            return true;
        })
            .filter((testFilePath) => !testFilePath.match(/node_modules/))
            .map((testFilePath) => ({ path: testFilePath }));
        if (testFiles.length === 0) {
            const knapsackProLogger = new core_1.KnapsackProLogger();
            const errorMessage = `Test files cannot be found.\nPlease set KNAPSACK_PRO_TEST_FILE_PATTERN matching your test directory structure.\nLearn more: ${Urls.NO_TESTS_FOUND}`;
            knapsackProLogger.error(errorMessage);
            throw errorMessage;
        }
        return testFiles;
    }
}
exports.TestFilesFinder = TestFilesFinder;
